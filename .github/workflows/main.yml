name: Slash commands

on:
  issue_comment:
    types: [created]

jobs:
  softfix:
    name: Softfix
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/softfix')
    runs-on: ubuntu-latest
    steps:
      - name: Parse command
        id: command
        uses: xt0rted/slash-command-action@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          command: softfix
          reaction-type: "eyes"
      - uses: actions/checkout@v2
      - uses: dekvall/softfix@v1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  squash:
    name: Squash
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/squash')
    runs-on: ubuntu-latest
    steps:
      - name: Parse command
        id: command
        uses: xt0rted/slash-command-action@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          command: squash
          reaction-type: "eyes"
          
      - uses: actions/checkout@v2
        with:
            fetch-depth: 0
            
      - name: Get branch ref
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch
        
      - name: Get commit message
        id: commit-message
        uses: actions/github-script@v4
        env:
          MESSAGE: ${{ github.event.comment.body }}
        with:
         script: |
           if (process.env.MESSAGE) {
             return process.env.MESSAGE
             const matchResult = process.env.MESSAGE.match(/`(.|\n)*`/)
             if (matchResult) {
               const message = matchResult[0]
               if (message) {
                 return message
               }
             }
           }
           const message = await github.pulls.listCommits({
             owner: context.issue.owner,
             repo: context.issue.repo,
             pull_number: context.issue.number,
           }).then(({data}) => data[0].commit.message)
           return message
      - run |
          echo "${{toJson(steps.commit-message.outputs.result )}}"
      - name: Merge base branch
        run: |
          git config --global user.email "${{github.actor}}"
          git config --global user.name "${{github.actor}}@users.noreply.github.com"
          git checkout ${{ steps.comment-branch.outputs.head_ref }}
          git merge ${{ steps.comment-branch.outputs.base_ref }} --no-edit
          
      - name: Add comment on failure
        if: ${{ failure() }}
        uses: actions/github-script@v4
        with:
          script: |
            const result = await github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ":warning: Can't merge base branch. Please resolve all conflicts first."
            })
          
      - name: squash and push
        run: |
          git reset --soft origin/${{ steps.comment-branch.outputs.base_ref }}
          git commit -m ${{ steps.commit-message.outputs.result }}
          git push -f
          git status

  run_integration_tests:
    name: Run integration tests
    if: |
      github.event.issue.pull_request 
      && (github.event.comment.body == '/ci integration-tests' || github.event.comment.body == '/ci cypress')
    runs-on: ubuntu-latest
    steps:
      - name: Parse command
        id: command
        uses: xt0rted/slash-command-action@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          command: ci
          reaction-type: "eyes"
    
      - name: Add comment
        id: add-comment
        uses: actions/github-script@v4
        with:
          script: |
            const result = await github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '#### Starting tests...\n\n>This comment will be updated when testing is completed'
            })
            return result.data.id
            
      - name: Get branch ref
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch
        
      - name: Run tests
        id: run-tests
        if: |
          steps.command.outputs.command-arguments == 'integration-tests'
          || steps.command.outputs.command-arguments == 'cypress'
        uses: aurelien-baudet/workflow-dispatch@v2
        with:
          workflow: Post message
          token: ${{ secrets.PERSONAL_TOKEN }}
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Edit comment
        if: always()
        uses: actions/github-script@v4
        env:
          COMMENT_ID: ${{ steps.add-comment.outputs.result }}
          RESULT: ${{ steps.run-tests.outputs.workflow-conclusion }}
          URL: ${{ steps.run-tests.outputs.workflow-url }}
        with:
          script: |
            const { COMMENT_ID, RESULT, URL, STATUS } = process.env
            github.issues.updateComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: COMMENT_ID,
              body: RESULT === 'success'
                ? `#### Tests completed! :tada:\n\n>Result: ${RESULT}\n>Log: ${URL}`
                : `#### Tests failed! :angry:\n\n>Result: ${RESULT}\n>Log: ${URL}`
            })
