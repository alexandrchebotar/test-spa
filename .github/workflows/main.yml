name: Slash commands

on:
  issue_comment:
    types: [created, deleted]

jobs:
  check_comments:
    name: Run integration tests on /ci
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/')
    runs-on: ubuntu-latest
    steps:
      - name: Check for Command
        id: command
        uses: xt0rted/slash-command-action@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          command: ci
          reaction-type: "eyes"
        
      - name: Starting test comment
        if: ${{steps.command.outputs.command-arguments == 'cypress' || steps.command.outputs.command-arguments == 'integration-tests'}}
        id: add-comment
        uses: actions/github-script@v4
        with:
          script: |
            const result = await github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '#### Starting tests... \n\n *This comment will be updated when the test finishes*'
            })
            return result.data.id
          
      - name: Get add-comments result
        run: |
          echo "${{steps.add-comment.outputs.result}}"
          echo "${{steps.add-comment.outputs.result.body}}"
          echo "${{steps.add-comment.outputs.result.response}}"
            
      - name: Get brunch ref
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch
        
      - name: Run tests
        id: run-tests
        uses: aurelien-baudet/workflow-dispatch@v2
        with:
          workflow: Post_message
          token: ${{ secrets.PERSONAL_TOKEN }}
          ref: ${{ steps.comment-branch.outputs.head_ref }}
          propagate_failure: false
          inputs: '{ "issue_number": "${{github.event.issue.number}}", "run_id": "${{github.run_id}}"}'

      - name: Post a result comment
        if: always()
        uses: actions/github-script@v4
        env:
          COMMENT_ID: ${{ steps.add-comment.outputs.result }}
          RESULT: ${{ steps.run-tests.outputs.workflow-conclusion }}
          URL: ${{ steps.run-tests.outputs.workflow-url }}
        with:
          script: |
            const { COMMENT_ID, RESULT, URL } = process.env
            github.issues.updateComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: COMMENT_ID,
              body: `#### Tests completed! :tada:\n\nResult: ${RESULT}\n\nLog: ${URL}`
            })

